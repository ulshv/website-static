{"version":3,"sources":["webpack:///./src/typings.ts","webpack:///./src/components/comments.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["Platforms","iconsMap","twitter","socialIcons","instagram","linkedin","vk","hackernews","habr","vc","reddit","iconsMapper","share","icon","platform","Error","url","commentsCount","ShareLink","styled","a","Count","div","messages","en","commentsTitle","ru","Comments","props","langKey","post","translatedPost","sharesSameLang","frontmatter","shares","map","sharesDiffLang","showCommentsCount","Boolean","find","s","style","marginBottom","display","marginRight","href","target","src","Title","h1","rhythm","alsoAvailableInDiffLang","pageQuery","BlogPostTemplate","data","markdownRemark","pageContext","previous","next","location","title","description","excerpt","to","marginTop","date","dangerouslySetInnerHTML","__html","html","margin","flexWrap","justifyContent","listStyle","padding","node","rel"],"mappings":"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","file":"component---src-templates-blog-post-tsx-6cd4d4f943747e4c9188.js","sourcesContent":["export enum Platforms {\n  twitter = 'twitter',\n  instagram = 'instagram',\n  hackernews = 'hackernews',\n  linkedin = 'linkedin',\n  reddit = 'reddit',\n  habr = 'habr',\n  vk = 'vk',\n  vc = 'vc',\n};\n\nexport type Share = {\n  platform: Platforms,\n  url: string,\n  commentsCount: number | null\n};\n\nexport type Post = {\n  id: string\n  excerpt: string\n  html: string\n  frontmatter: {\n    title: string\n    description: string | null\n    date: string\n    langKey: string\n    url: string\n    shares: Share[] | null,\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Share, Platforms, Post } from '../typings';\nimport socialIcons from \"../constants/social-icons\";\n\nconst iconsMap = {\n  [Platforms.twitter]: socialIcons.twitter,\n  [Platforms.instagram]: socialIcons.instagram,\n  [Platforms.linkedin]: socialIcons.linkedin,\n  [Platforms.vk]: socialIcons.vk,\n  [Platforms.hackernews]: socialIcons.hackernews,\n  [Platforms.habr]: socialIcons.habr,\n  [Platforms.vc]: socialIcons.vc,\n  [Platforms.reddit]: socialIcons.reddit,\n}\n\nconst iconsMapper = (share: Share) => {\n  const icon = iconsMap[share.platform];\n  if (!icon) throw new Error(`No icon for platform: ${share.platform}`);\n  return ({ icon, url: share.url, commentsCount: share.commentsCount || 0 });\n};\n\nconst ShareLink = styled.a`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  line-height: 1;\n  margin-right: 16px;\n  margin-bottom: 12px;\n  cursor: pointer;\n  color: #333;\n  box-shadow: none;\n\n  img {\n    margin-bottom: 0;\n    height: 36px;\n  }\n`;\n\nconst Count = styled.div`\n  margin-top: 8px;\n  font-size: 14px;\n`;\n\ntype Props = {\n  langKey: string,\n  post: Post,\n  translatedPost?: Post,\n}\n\nconst messages = {\n  en: {\n    commentsTitle: `Comments`,\n  },\n  ru: {\n    commentsTitle: `Комментарии`,\n  }\n}\n\nconst Comments = (props: Props) => {\n  const { langKey, post, translatedPost } = props;\n\n  const sharesSameLang = (post.frontmatter.shares || []).map(iconsMapper);\n  const sharesDiffLang = (translatedPost && translatedPost.frontmatter.shares || []).map(iconsMapper);\n  const showCommentsCount = Boolean([...sharesSameLang, ...sharesDiffLang].find(s => Boolean(s.commentsCount)));\n\n  return (\n    <section style={{ marginBottom: 80 }}>\n      <h4>{messages[langKey].commentsTitle}</h4>\n      <div style={{ display: `block`, marginBottom: 16, marginRight: -16 }}>\n        {sharesSameLang.map(({ icon, url, commentsCount }) =>\n          <ShareLink href={url} target=\"_blank\">\n            <img src={icon} />\n            {showCommentsCount && <Count>{commentsCount}</Count>}\n          </ShareLink>\n        )}\n\n        {sharesDiffLang.map(({ icon, url, commentsCount }) =>\n          <ShareLink href={url} target=\"_blank\">\n            <img src={icon} />\n            {showCommentsCount && <Count>{commentsCount}</Count>}\n          </ShareLink>\n        )}\n      </div>\n    </section>\n  )\n}\n\nexport default Comments;\n","import React, { useState } from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport styled from \"styled-components\";\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\nimport Comments from \"../components/comments\";\nimport { Post } from \"../typings\";\n\nconst MOBILE_WIDTH = 600;\nconst MOBILE_QUERY = `(max-width: ${MOBILE_WIDTH}px)`;\n\nconst Title = styled.h1`\n  margin: ${rhythm(1)} 0 0;\n  @media ${MOBILE_QUERY} {\n    font-size: 36px;\n  }\n`;\n\nconst messages = {\n  en: {\n    alsoAvailableInDiffLang: 'Эта статья также доступна на русском',\n  },\n  ru: {\n    alsoAvailableInDiffLang: 'This post is also available in English',\n  }\n}\n\ntype Props = {\n  location: any\n  data: {\n    markdownRemark: Post\n  }\n  pageContext: {\n    previous: any,\n    next: any,\n    translatedPost?: Post\n  }\n}\n\nconst BlogPostTemplate = (props: Props) => {\n  const post = props.data.markdownRemark\n  const { previous, next, translatedPost } = props.pageContext\n  const { langKey } = post.frontmatter;\n\n  return (\n    <Layout location={props.location} langKey={langKey}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        langKey={langKey}\n      />\n      <article>\n        <header>\n          <Title>\n            {post.frontmatter.title}\n          </Title>\n\n          {\n            translatedPost &&\n            <Link\n              to={translatedPost.frontmatter.url}\n              style={{ display: 'inline-block', marginTop: rhythm(0.2) }}\n            >\n              {messages[langKey].alsoAvailableInDiffLang}\n            </Link>\n          }\n\n          <p\n            style={{\n              display: `block`,\n              marginTop: rhythm(0.6),\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.frontmatter.date}\n          </p>\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n      </article>\n\n\n      <hr style={{ margin: `${rhythm(2)} 0` }} />\n\n      <Comments langKey={langKey} post={post} translatedPost={translatedPost} />\n\n      {\n        (previous || next) && (\n          <nav style={{ marginBottom: rhythm(2) }}>\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link to={previous.node.frontmatter.url} rel=\"prev\">\n                    ← {previous.node.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={next.node.frontmatter.url} rel=\"next\">\n                    {next.node.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </nav>\n        )\n      }\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        langKey\n        url\n        shares {\n          platform\n          url\n          commentsCount\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}