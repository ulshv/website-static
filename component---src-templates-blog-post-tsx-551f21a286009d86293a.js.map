{"version":3,"sources":["webpack:///./src/typings.ts","webpack:///./src/components/comments.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["Platforms","iconsMap","twitter","socialIcons","instagram","linkedin","vk","hackernews","habr","vc","reddit","iconsMapper","share","icon","platform","Error","url","ShareLink","styled","a","messages","en","commentsTitle","ru","Comments","props","langKey","post","translatedPost","sharesSameLang","frontmatter","shares","map","sharesDiffLang","style","marginBottom","display","marginRight","href","target","src","Title","h1","rhythm","div","alsoAvailableInDiffLang","pageQuery","BlogPostTemplate","data","markdownRemark","pageContext","previous","next","disqusIdOverride","useState","title","location","description","excerpt","to","marginTop","date","dangerouslySetInnerHTML","__html","html","margin","flexWrap","justifyContent","listStyle","padding","node","rel"],"mappings":"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","file":"component---src-templates-blog-post-tsx-551f21a286009d86293a.js","sourcesContent":["export enum Platforms {\n  twitter = 'twitter',\n  instagram = 'instagram',\n  hackernews = 'hackernews',\n  linkedin = 'linkedin',\n  reddit = 'reddit',\n  habr = 'habr',\n  vk = 'vk',\n  vc = 'vc',\n};\n\nexport type Share = {\n  platform: Platforms,\n  url: string,\n};\n\nexport type Post = {\n  id: string\n  excerpt: string\n  html: string\n  frontmatter: {\n    title: string\n    description: string | null\n    date: string\n    langKey: string\n    url: string\n    disqusIdOverride: string | null\n    shares: Share[] | null,\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Share, Platforms, Post } from '../typings';\nimport socialIcons from \"../constants/social-icons\";\n\nconst iconsMap = {\n  [Platforms.twitter]: socialIcons.twitter,\n  [Platforms.instagram]: socialIcons.instagram,\n  [Platforms.linkedin]: socialIcons.linkedin,\n  [Platforms.vk]: socialIcons.vk,\n  [Platforms.hackernews]: socialIcons.hackernews,\n  [Platforms.habr]: socialIcons.habr,\n  [Platforms.vc]: socialIcons.vc,\n  [Platforms.reddit]: socialIcons.reddit,\n}\n\nconst iconsMapper = share => {\n  const icon = iconsMap[share.platform];\n  if (!icon) throw new Error(`No icon for platform: ${share.platform}`);\n  return ({ icon, url: share.url });\n};\n\nconst ShareLink = styled.a`\n  display: inline-block;\n  line-height: 1;\n  margin-right: 16px;\n  margin-bottom: 12px;\n  cursor: pointer;\n  box-shadow: none;\n\n  img {\n    margin-bottom: 0;\n    height: 36px;\n  }\n`;\n\ntype Props = {\n  langKey: string,\n  post: Post,\n  translatedPost?: Post,\n}\n\nconst messages = {\n  en: {\n    commentsTitle: `Discuss on`,\n  },\n  ru: {\n    commentsTitle: `Комментировать в`,\n  }\n}\n\nconst Comments = (props: Props) => {\n  const { langKey, post, translatedPost } = props;\n\n  const sharesSameLang = (post.frontmatter.shares || []).map(iconsMapper);\n  const sharesDiffLang = (translatedPost && translatedPost.frontmatter.shares || []).map(iconsMapper);\n\n  return (\n    <section style={{ marginBottom: 80 }}>\n      <h4>{messages[langKey].commentsTitle}</h4>\n      <div style={{ display: `block`, marginBottom: 16, marginRight: -16 }}>\n        {sharesSameLang.map(({ icon, url }) =>\n          <ShareLink href={url} target=\"_blank\">\n            <img src={icon} />\n          </ShareLink>\n        )}\n\n        {sharesDiffLang.map(({ icon, url }) =>\n          <ShareLink href={url} target=\"_blank\">\n            <img src={icon} />\n          </ShareLink>\n        )}\n      </div>\n    </section>\n  )\n}\n\nexport default Comments;\n","import React, { useState } from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { DiscussionEmbed, CommentCount } from 'disqus-react';\nimport styled from \"styled-components\";\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\nimport { SocialWithMessage } from \"../components/social\";\nimport Comments from \"../components/comments\";\nimport { Post } from \"../typings\";\n\nconst MOBILE_WIDTH = 600;\nconst MOBILE_QUERY = `(max-width: ${MOBILE_WIDTH}px)`;\n\nconst Title = styled.h1`\n  margin: ${rhythm(1)} 0 0;\n  @media ${MOBILE_QUERY} {\n    font-size: 36px;\n  }\n`;\n\nconst CommentsWrapper = styled.div`\n  margin-top: 24px;\n  min-height: 130px;\n`;\n\nconst ShowCommentsBtn = styled.div`\n  display: inline-block;\n  cursor: pointer;\n  padding: 8px 16px;\n  font-size: 14px;\n  border: 2px solid currentColor;\n  border-radius: 4px;\n`;\n\nconst messages = {\n  en: {\n    alsoAvailableInDiffLang: 'Эта статья также доступна на русском',\n  },\n  ru: {\n    alsoAvailableInDiffLang: 'This post is also available in English',\n  }\n}\n\ntype Props = {\n  location: any\n  data: {\n    markdownRemark: Post\n  }\n  pageContext: {\n    previous: any,\n    next: any,\n    translatedPost?: Post\n  }\n}\n\nconst BlogPostTemplate = (props: Props) => {\n  const post = props.data.markdownRemark\n  const { previous, next, translatedPost } = props.pageContext\n  const { langKey, disqusIdOverride } = post.frontmatter;\n  const fullUrl = `https://sergey.blog/${post.frontmatter.url}`;\n\n\n  const [isCommentsVisible, setIsCommentsVisible] = useState(false);\n  const disqusShortname = langKey === 'ru' ? 'sergey-blog-ru' : 'sergey-blog';\n  const disqusConfig = {\n    url: fullUrl,\n    identifier: disqusIdOverride || fullUrl,\n    title: post.frontmatter.title,\n  };\n\n  return (\n    <Layout location={props.location} langKey={langKey}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        langKey={langKey}\n      />\n      <article>\n        <header>\n          <Title>\n            {post.frontmatter.title}\n          </Title>\n\n          {\n            translatedPost &&\n            <Link\n              to={translatedPost.frontmatter.url}\n              style={{ display: 'inline-block', marginTop: rhythm(0.2) }}\n            >\n              {messages[langKey].alsoAvailableInDiffLang}\n            </Link>\n          }\n\n          <p\n            style={{\n              display: `block`,\n              marginTop: rhythm(0.6),\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.frontmatter.date}\n          </p>\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n      </article>\n\n\n      <hr style={{ margin: `${rhythm(2)} 0` }} />\n\n      <Comments langKey={langKey} post={post} translatedPost={translatedPost} />\n\n      {/* <footer>\n        <Bio langKey={langKey} />\n      </footer> */}\n\n      {\n        (previous || next) && (\n          <nav style={{ marginBottom: rhythm(2) }}>\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link to={previous.node.frontmatter.url} rel=\"prev\">\n                    ← {previous.node.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={next.node.frontmatter.url} rel=\"next\">\n                    {next.node.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </nav>\n        )\n      }\n\n      {/* <CommentsWrapper>\n        {\n          isCommentsVisible\n          ? <DiscussionEmbed shortname={disqusShortname} config={disqusConfig} />\n          : <ShowCommentsBtn onClick={() => setIsCommentsVisible(true)}>\n              {langKey === 'ru' ? 'Показать комментарии' : 'Show comments'}\n            </ShowCommentsBtn>\n        }\n      </CommentsWrapper> */}\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        langKey\n        url\n        disqusIdOverride\n        shares {\n          platform\n          url\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}